--
-- The _raw table stores the most recent data from the source system
--
-- NOTE: ONLY GRANT SELECT PERMISSIONS ON THIS TABLE - ALL UPDATES SHOULD BE DONE VIA THE PROCEDURES
--
CREATE TABLE IF NOT EXISTS {{namespace}}{{name}}_raw (
  ext_uid TEXT NOT NULL PRIMARY KEY, -- External system's unique identifier
  {{#if storeSource}}source_id TEXT NOT NULL, -- Source system identifier{{/if}}
  {{#if extIdType}}ext_id {{extIdType}} NOT NULL, -- External system's unique identifier{{/if}}

  job_id INTEGER NOT NULL, -- Job identifier
  data_rev INTEGER NOT NULL, -- Revision of the data loader
  raw_data JSONB NOT NULL, -- Raw JSON data from external system

  deleted BOOLEAN NOT NULL, -- Set to true if the record has been deleted

  first_fetch_date TIMESTAMPTZ NOT NULL, -- Fetch date when first loaded
  last_fetch_date TIMESTAMPTZ NOT NULL, -- Fetch date when last loaded

  ext_create_date TIMESTAMPTZ NOT NULL, -- External system's create timestamp - if none, uses fetch_date
  ext_update_date TIMESTAMPTZ NOT NULL, -- External system's update timestamp - if none, uses fetch date

  data_update_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, -- When raw_data or deleted last updated in CDB - Current timestamp at modification
  raw_create_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, -- When data created in CDB - Current timestamp at insert
  raw_update_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP -- When the record was last updated in CDB (even if unmodified)
);
CREATE INDEX IF NOT EXISTS {{name}}_raw_data_rev_idx ON {{namespace}}{{name}}_raw (data_rev);
CREATE INDEX IF NOT EXISTS {{name}}_raw_job_id_idx ON {{namespace}}{{name}}_raw (job_id);
{{#if extIdType}}
{{#if storeSource}}
-- Cannot be unique because this will cause issues with ON CONFLICT loading (as long as the uid is correctly formed, the PK will prevent duplicates)
CREATE INDEX IF NOT EXISTS {{name}}_raw_source_id_ext_id_idx ON {{namespace}}{{name}}_raw (source_id, ext_id);
{{else}}
-- Cannot be unique because this will cause issues with ON CONFLICT loading (as long as the uid is correctly formed, the PK will prevent duplicates)
CREATE INDEX IF NOT EXISTS {{name}}_raw_ext_id_idx ON {{namespace}}{{name}}_raw (ext_id);
{{/if}}
{{/if}}

--
-- This function takes in a JSON array of elements to load and upserts them into _raw
-- Run in batches (generally about 500 records per batch is good)
-- _rev will not be updated until you run the load rev procedure
--
CREATE OR REPLACE PROCEDURE {{namespace}}{{name}}_raw_load(_job_id INTEGER, _data_rev INTEGER, _data JSONB, counts INOUT JSONB )
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  temp INTEGER;
BEGIN
  WITH dataRecords AS (
    SELECT ext_uid, ext_id, raw_data, COALESCE(deleted, false) AS deleted,
           fetch_date, ext_create_date, ext_update_date,
           COALESCE(source_id, {{namespace}}{{name}}_default_source_id()) AS source_id
      FROM jsonb_to_recordset(_data)
            AS (ext_uid TEXT, -- Either ext_uid or ext_id is required
                ext_id {{#if extIdType}}{{extIdType}}{{else}}TEXT{{/if}}, -- Either ext_uid or ext_id is required
                source_id TEXT,
                raw_data JSONB, -- NOT NULL
                fetch_date TIMESTAMPTZ, -- NOT NULL
                deleted BOOLEAN,
                ext_create_date TIMESTAMPTZ,
                ext_update_date TIMESTAMPTZ
                )
  )
  INSERT INTO {{namespace}}{{name}}_raw
              (ext_uid,
               data_rev, job_id, raw_data, deleted, first_fetch_date, last_fetch_date,
               {{#if storeSource}}source_id,{{/if}}
               {{#if extIdType}}ext_id,{{/if}}
               ext_create_date,
               ext_update_date
              )
       SELECT COALESCE(ext_uid, source_id || ':' || ext_id::TEXT),
              _data_rev, _job_id, raw_data, deleted, fetch_date, fetch_date,
              {{#if storeSource}}source_id,{{/if}}
              {{#if extIdType}}ext_id,{{/if}}
              COALESCE(ext_create_date, fetch_date),
              COALESCE(ext_update_date, fetch_date)
         FROM dataRecords
           ON CONFLICT(ext_uid) DO
       UPDATE SET data_rev = EXCLUDED.data_rev,
                  job_id = EXCLUDED.job_id,
                  raw_data = EXCLUDED.raw_data,
                  deleted = EXCLUDED.deleted,
                  last_fetch_date = EXCLUDED.last_fetch_date,
                  ext_update_date = EXCLUDED.ext_update_date,
                  data_update_date = CASE WHEN ( {{name}}_raw.raw_data <> EXCLUDED.raw_data OR
                                                 {{name}}_raw.deleted <> EXCLUDED.deleted
                                               )
                                          THEN CURRENT_TIMESTAMP
                                          ELSE {{name}}_raw.data_update_date
                                END,
                  raw_update_date = CURRENT_TIMESTAMP
            WHERE {{name}}_raw.last_fetch_date < EXCLUDED.last_fetch_date;

  GET DIAGNOSTICS temp := ROW_COUNT;
  counts := counts || jsonb_build_object('modified_count', temp);
END;
$$;

--
-- This function deletes any raw records not fetched on or after the provided cutoff
-- Use after a full load of raw to purge deleted records
--
CREATE OR REPLACE PROCEDURE {{namespace}}{{name}}_raw_trim(_job_id INTEGER, _del_timestamp TIMESTAMPTZ, counts INOUT JSONB )
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  temp INTEGER;
BEGIN
  UPDATE {{namespace}}{{name}}_raw
     SET deleted = true,
         last_fetch_date = _del_timestamp,
         data_update_date = _del_timestamp,
         raw_update_date = CURRENT_TIMESTAMP
   WHERE NOT deleted
     AND job_id <> _job_id;

  GET DIAGNOSTICS temp := ROW_COUNT;
  counts := counts || jsonb_build_object('raw_trim_count', temp);

{{#each extraRawTrim}}
{{this}}
{{/each}}

END;
$$;

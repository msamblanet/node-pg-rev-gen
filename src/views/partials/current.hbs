--
-- Materialized view of current_view_all to allow for indexing
--
{{#if materializeView}}CREATE MATERIALIZED VIEW IF NOT EXISTS{{else}}CREATE OR REPLACE VIEW{{/if}} {{namespace}}{{name}}_current_all_mview AS
SELECT rev_id,
       ext_uid,
       {{#if storeSource}}source_id,{{/if}}
       {{#if extIdType}}ext_id,{{/if}}
       -- Begin materialized custom fields
{{#if materializeView}}
{{~#each extractedFields}}{{#if this.definition}}{{#unless this.doNotMaterialize}}
      {{this.definition}} AS {{@key}}, {{#if this.comment}}-- {{this.comment}}{{/if}}
{{/unless}}{{/if}}{{/each}}
{{else}}
{{~#each extractedFields}}{{#if this.definition}}
      {{this.definition}} AS {{@key}}, {{#if this.comment}}-- {{this.comment}}{{/if}}
{{/if}}{{/each}}
{{/if}}
       -- End custom fields
       deleted,
       update_date
{{#unless materializeView}}
       -- If the view is not materialized, just bring in all the extra columns now...
       , data_rev, raw_data, raw_delta, raw_revert, fetch_date, ext_create_date, ext_update_date, create_date
{{/unless}}
  FROM {{namespace}}{{name}}_rev WHERE current;

{{#if materializeView}}
-- rev_id and ext_uid should be unique so give them unique indexes
CREATE UNIQUE INDEX IF NOT EXISTS {{name}}_current_all_mview_rev_id_idx ON {{namespace}}{{name}}_current_all_mview (rev_id);
CREATE UNIQUE INDEX IF NOT EXISTS {{name}}_current_all_mview_ext_uid_idx ON {{namespace}}{{name}}_current_all_mview (ext_uid);
CREATE INDEX IF NOT EXISTS {{name}}_current_all_mview_deleted_idx ON {{namespace}}{{name}}_current_all_mview (deleted);
{{#if extIdType}}
{{#if storeSource}}
-- Cannot be unique because this will cause issues with ON CONFLICT loading (as long as the uid is correctly formed, the PK will prevent duplicates)
CREATE INDEX IF NOT EXISTS {{name}}_current_all_mview_source_id_ext_id_idx ON {{namespace}}{{name}}_current_all_mview (source_id, ext_id);
{{else}}
-- Cannot be unique because this will cause issues with ON CONFLICT loading (as long as the uid is correctly formed, the PK will prevent duplicates)
CREATE INDEX IF NOT EXISTS {{name}}_current_all_mview_ext_id_idx ON {{namespace}}{{name}}_current_all_mview (ext_id);
{{/if}}
{{/if}}

-- Update date commonly queried for chained updates
CREATE INDEX IF NOT EXISTS {{name}}_current_all_mview_update_date_idx ON {{namespace}}{{name}}_current_all_mview (update_date);

-- Custom field indexes
{{~#each extractedFields}}{{#if this.index}}
CREATE {{#if this.unique}}UNIQUE {{/if}}INDEX IF NOT EXISTS {{../name}}_current_all_mview_{{@key}}_idx ON {{../namespace}}{{../name}}_current_all_mview ({{@key}});
{{/if}}{{/each}}
{{~#each indexes}}
CREATE {{#if this.unique}}UNIQUE {{/if}}INDEX IF NOT EXISTS {{../name}}_current_all_mview_{{@key}}_idx ON {{../namespace}}{{../name}}_current_all_mview {{this.definition}};{{#if this.comment}} -- {{this.comment}}{{/if}}
{{/each}}
{{/if}}

--
-- Current-All view (need with clause so there is no prefix on the B columns)
--
{{#if materializeView}}
CREATE OR REPLACE VIEW {{namespace}}{{name}}_current_all AS
  WITH a AS (
    SELECT a.*,
           b.data_rev, b.raw_data, b.raw_delta, b.raw_revert, b.fetch_date, b.ext_create_date, b.ext_update_date, b.create_date
      FROM {{namespace}}{{name}}_current_all_mview a
      JOIN {{namespace}}{{name}}_rev b ON a.rev_id = b.rev_id
  )
  SELECT a.*
{{~#each extractedFields}}{{#if this.definition}}{{#if this.doNotMaterialize}}
      , {{this.definition}} AS {{@key}} {{#if this.comment}}-- {{this.comment}}{{/if}}
{{/if}}{{/if}}{{/each}}
  FROM a;
{{else}}
CREATE OR REPLACE VIEW {{namespace}}{{name}}_current_all AS
    SELECT * FROM {{namespace}}{{name}}_current_all_mview;
{{/if}}

--
-- Current view
--
CREATE OR REPLACE VIEW {{namespace}}{{name}}_current AS
{{#if materializeView}}
  WITH a AS (
    SELECT a.*,
           b.data_rev, b.raw_data, b.raw_delta, b.raw_revert, b.fetch_date, b.ext_create_date, b.ext_update_date, b.create_date
      FROM {{namespace}}{{name}}_current_all_mview a
      JOIN {{namespace}}{{name}}_rev b ON a.rev_id = b.rev_id
     WHERE NOT a.deleted
  )
  SELECT a.*
{{~#each extractedFields}}{{#if this.definition}}{{#if this.doNotMaterialize}}
      , {{this.definition}} AS {{@key}} {{#if this.comment}}-- {{this.comment}}{{/if}}
{{/if}}{{/if}}{{/each}}
  FROM a;
{{else}}
    SELECT * FROM {{namespace}}{{name}}_current_all_mview WHERE NOT deleted;
{{/if}}

--
-- Refresh the materialized view
--
CREATE OR REPLACE PROCEDURE {{namespace}}{{name}}_current_refresh(counts INOUT JSONB )
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  temp INTEGER;
BEGIN
{{#if materializeView}}
  REFRESH MATERIALIZED VIEW {{#if concurrentView}}CONCURRENTLY {{/if}}{{namespace}}{{name}}_current_all_mview;
{{/if}}
{{#each extraRefresh}}
  {{this}}
{{/each}}
END;
$$;

--
-- The _updated table is used to track external update triggers
-- for use during ingest
--
CREATE TABLE IF NOT EXISTS {{namespace}}{{name}}_updated (
  ext_uid TEXT NOT NULL PRIMARY KEY, -- External system's unique identifier
  {{#if storeSource}}source_id TEXT NOT NULL, -- Source system identifier{{/if}}
  {{#if extIdType}}ext_id {{extIdType}} NOT NULL, -- External system's unique identifier{{/if}}
  update_date TIMESTAMPTZ NOT NULL,
  raw_data TEXT,
  notes TEXT,

  -- Internal postgres auditing fields
  _created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  _updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);
{{#if extIdType}}CREATE UNIQUE INDEX IF NOT EXISTS {{name}}_updated_ext_id_idx ON {{namespace}}{{name}}_updated ({{#if storeSource}}source_id, {{/if}}ext_id);{{/if}}
CREATE INDEX IF NOT EXISTS {{name}}_updated_update_date_idx ON {{namespace}}{{name}}_updated (update_date);

--
-- Procedure to bulk load updates
--
CREATE OR REPLACE PROCEDURE {{namespace}}{{name}}_updated_load(_data JSONB, counts INOUT JSONB )
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  temp INTEGER;
BEGIN
  WITH rawRecords AS (
    SELECT COALESCE(ext_uid, {{#if defaultSourceId}}COALESCE(source_id, {{namespace}}{{name}}_default_source_id()){{else}}source_id{{/if}} || ':' || ext_id::TEXT) AS ext_uid,
           raw_data,
           {{#if defaultSourceId}}COALESCE(source_id, {{namespace}}{{name}}_default_source_id()){{else}}source_id{{/if}} AS source_id,
           ext_id, update_date, notes
      FROM jsonb_to_recordset(_data) AS (ext_uid TEXT, ext_id {{#if extIdType}}{{extIdType}}{{else}}TEXT{{/if}}, source_id TEXT, raw_data JSONB, update_date TIMESTAMPTZ, notes TEXT)
     ORDER BY ext_uid, update_date DESC
  ),
  distinctRecords AS (
    SELECT DISTINCT ON (ext_uid) ext_uid, raw_data,
              {{#if storeSource}}source_id,{{/if}}
              {{#if extIdType}}ext_id,{{/if}}
              update_date, notes
      FROM rawRecords
     ORDER BY ext_uid, update_date DESC
  )
  INSERT INTO {{namespace}}{{name}}_updated (
              ext_uid, raw_data,
              {{#if storeSource}}source_id,{{/if}}
              {{#if extIdType}}ext_id,{{/if}}
              update_date, notes)
       SELECT ext_uid, raw_data,
              {{#if storeSource}}source_id,{{/if}}
              {{#if extIdType}}ext_id,{{/if}}
              update_date, notes
         FROM distinctRecords
           ON CONFLICT(ext_uid) DO
       UPDATE SET raw_data = EXCLUDED.raw_data,
                  notes = EXCLUDED.notes,
                  update_date = EXCLUDED.update_date,
                  _updated_at = CURRENT_TIMESTAMP
            WHERE {{name}}_updated.update_date < EXCLUDED.update_date;

  GET DIAGNOSTICS temp := ROW_COUNT;
  counts := counts || jsonb_build_object('modified_count', temp);
END;
$$;

--
-- This function NULLs out the raw data from old revisions to save storage
-- (note: the delta/revert history is kept)
--
CREATE OR REPLACE PROCEDURE {{namespace}}{{name}}_updated_trim(_cutoff_date TIMESTAMPTZ, counts INOUT JSONB )
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  temp INTEGER;
BEGIN
  DELETE FROM {{namespace}}{{name}}_updated WHERE update_date < _cutoff_date;

  GET DIAGNOSTICS temp := ROW_COUNT;
  counts := counts || jsonb_build_object('updated_trim_count', temp);
END;
$$;
